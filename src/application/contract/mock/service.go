// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	response_order_service "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/src/application/modules/response/order_service"
	response_payment_service "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/src/application/modules/response/payment_service"
	entity "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/src/entities/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockExternalPaymentService is a mock of ExternalPaymentService interface.
type MockExternalPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalPaymentServiceMockRecorder
}

// MockExternalPaymentServiceMockRecorder is the mock recorder for MockExternalPaymentService.
type MockExternalPaymentServiceMockRecorder struct {
	mock *MockExternalPaymentService
}

// NewMockExternalPaymentService creates a new mock instance.
func NewMockExternalPaymentService(ctrl *gomock.Controller) *MockExternalPaymentService {
	mock := &MockExternalPaymentService{ctrl: ctrl}
	mock.recorder = &MockExternalPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalPaymentService) EXPECT() *MockExternalPaymentServiceMockRecorder {
	return m.recorder
}

// CreateQRCode mocks base method.
func (m *MockExternalPaymentService) CreateQRCode(payment entity.Payment) (response_payment_service.CreateQRCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQRCode", payment)
	ret0, _ := ret[0].(response_payment_service.CreateQRCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQRCode indicates an expected call of CreateQRCode.
func (mr *MockExternalPaymentServiceMockRecorder) CreateQRCode(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQRCode", reflect.TypeOf((*MockExternalPaymentService)(nil).CreateQRCode), payment)
}

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockOrderService) GetById(id int) (*response_order_service.GetByIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*response_order_service.GetByIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockOrderServiceMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrderService)(nil).GetById), id)
}
