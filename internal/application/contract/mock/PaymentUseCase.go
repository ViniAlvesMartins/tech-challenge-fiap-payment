// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/entities/entity"

	enum "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/entities/enum"

	mock "github.com/stretchr/testify/mock"
)

// PaymentUseCase is an autogenerated mock type for the PaymentUseCase type
type PaymentUseCase struct {
	mock.Mock
}

// CanceledPaymentNotification provides a mock function with given fields: ctx, id
func (_m *PaymentUseCase) CanceledPaymentNotification(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for CanceledPaymentNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmedPaymentNotification provides a mock function with given fields: ctx, id
func (_m *PaymentUseCase) ConfirmedPaymentNotification(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmedPaymentNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateQRCode provides a mock function with given fields: ctx, order
func (_m *PaymentUseCase) CreateQRCode(ctx context.Context, order *entity.Order) (*entity.QRCodePayment, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateQRCode")
	}

	var r0 *entity.QRCodePayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) (*entity.QRCodePayment, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) *entity.QRCodePayment); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.QRCodePayment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPaymentStatus provides a mock function with given fields: ctx, id
func (_m *PaymentUseCase) GetLastPaymentStatus(ctx context.Context, id int) (enum.PaymentStatus, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPaymentStatus")
	}

	var r0 enum.PaymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (enum.PaymentStatus, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) enum.PaymentStatus); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(enum.PaymentStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentUseCase creates a new instance of PaymentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentUseCase {
	mock := &PaymentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
