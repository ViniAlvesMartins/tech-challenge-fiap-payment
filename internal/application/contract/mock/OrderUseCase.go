// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	entity "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/entities/entity"
	mock "github.com/stretchr/testify/mock"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id
func (_m *OrderUseCase) GetById(id int) (*entity.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
