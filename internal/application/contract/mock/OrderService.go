// Code generated by mockery v2.43.2. DO NOT EDIT.

package mock

import (
	order "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/external/service/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// GetById provides a mock function with given fields: id
func (_m *OrderService) GetById(id int) (*order.GetByIdResp, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *order.GetByIdResp
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*order.GetByIdResp, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *order.GetByIdResp); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.GetByIdResp)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
