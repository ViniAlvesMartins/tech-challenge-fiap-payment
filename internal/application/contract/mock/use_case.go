// Code generated by MockGen. DO NOT EDIT.
// Source: use_case.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	contract "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/application/contract"
	entity "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/entities/entity"
	enum "github.com/ViniAlvesMartins/tech-challenge-fiap-payment/internal/entities/enum"
	gomock "github.com/golang/mock/gomock"
)

// MockPaymentInterface is a mock of PaymentInterface interface.
type MockPaymentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentInterfaceMockRecorder
}

// MockPaymentInterfaceMockRecorder is the mock recorder for MockPaymentInterface.
type MockPaymentInterfaceMockRecorder struct {
	mock *MockPaymentInterface
}

// NewMockPaymentInterface creates a new mock instance.
func NewMockPaymentInterface(ctrl *gomock.Controller) *MockPaymentInterface {
	mock := &MockPaymentInterface{ctrl: ctrl}
	mock.recorder = &MockPaymentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentInterface) EXPECT() *MockPaymentInterfaceMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockPaymentInterface) Process(p entity.Payment) (*contract.T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", p)
	ret0, _ := ret[0].(*contract.T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockPaymentInterfaceMockRecorder) Process(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockPaymentInterface)(nil).Process), p)
}

// MockOrderUseCase is a mock of OrderUseCase interface.
type MockOrderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockOrderUseCaseMockRecorder
}

// MockOrderUseCaseMockRecorder is the mock recorder for MockOrderUseCase.
type MockOrderUseCaseMockRecorder struct {
	mock *MockOrderUseCase
}

// NewMockOrderUseCase creates a new mock instance.
func NewMockOrderUseCase(ctrl *gomock.Controller) *MockOrderUseCase {
	mock := &MockOrderUseCase{ctrl: ctrl}
	mock.recorder = &MockOrderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderUseCase) EXPECT() *MockOrderUseCaseMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockOrderUseCase) GetById(id int) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockOrderUseCaseMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockOrderUseCase)(nil).GetById), id)
}

// MockPaymentUseCase is a mock of PaymentUseCase interface.
type MockPaymentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUseCaseMockRecorder
}

// MockPaymentUseCaseMockRecorder is the mock recorder for MockPaymentUseCase.
type MockPaymentUseCaseMockRecorder struct {
	mock *MockPaymentUseCase
}

// NewMockPaymentUseCase creates a new mock instance.
func NewMockPaymentUseCase(ctrl *gomock.Controller) *MockPaymentUseCase {
	mock := &MockPaymentUseCase{ctrl: ctrl}
	mock.recorder = &MockPaymentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUseCase) EXPECT() *MockPaymentUseCaseMockRecorder {
	return m.recorder
}

// CanceledPaymentNotification mocks base method.
func (m *MockPaymentUseCase) CanceledPaymentNotification(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanceledPaymentNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanceledPaymentNotification indicates an expected call of CanceledPaymentNotification.
func (mr *MockPaymentUseCaseMockRecorder) CanceledPaymentNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanceledPaymentNotification", reflect.TypeOf((*MockPaymentUseCase)(nil).CanceledPaymentNotification), ctx, id)
}

// ConfirmedPaymentNotification mocks base method.
func (m *MockPaymentUseCase) ConfirmedPaymentNotification(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmedPaymentNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmedPaymentNotification indicates an expected call of ConfirmedPaymentNotification.
func (mr *MockPaymentUseCaseMockRecorder) ConfirmedPaymentNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmedPaymentNotification", reflect.TypeOf((*MockPaymentUseCase)(nil).ConfirmedPaymentNotification), ctx, id)
}

// CreateQRCode mocks base method.
func (m *MockPaymentUseCase) CreateQRCode(ctx context.Context, order *entity.Order) (*entity.QRCodePayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQRCode", ctx, order)
	ret0, _ := ret[0].(*entity.QRCodePayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQRCode indicates an expected call of CreateQRCode.
func (mr *MockPaymentUseCaseMockRecorder) CreateQRCode(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQRCode", reflect.TypeOf((*MockPaymentUseCase)(nil).CreateQRCode), ctx, order)
}

// GetLastPaymentStatus mocks base method.
func (m *MockPaymentUseCase) GetLastPaymentStatus(ctx context.Context, id int) (enum.PaymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPaymentStatus", ctx, id)
	ret0, _ := ret[0].(enum.PaymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPaymentStatus indicates an expected call of GetLastPaymentStatus.
func (mr *MockPaymentUseCaseMockRecorder) GetLastPaymentStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPaymentStatus", reflect.TypeOf((*MockPaymentUseCase)(nil).GetLastPaymentStatus), ctx, id)
}
